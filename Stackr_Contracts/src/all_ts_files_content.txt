import { ActionConfirmationStatus } from "@stackr/sdk";
import express, { Request, Response } from "express";
import { roguelikeStateMachine, STATE_MACHINES } from "./stackr/machine";
import { mru } from "./stackr/mru";
import { registerPlayerSchema, updatePlayerStateSchema } from "./stackr/schemas";
import { transitions } from "./stackr/transitions";

const PORT = 3210;

export async function setupServer() {
  const app = express();
  app.use(express.json());
  // allow CORS
  app.use((_req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header(
      "Access-Control-Allow-Headers",
      "Origin, X-Requested-With, Content-Type, Accept"
    );
    next();
  });

  const { stateMachines, config, getStfSchemaMap, submitAction } = mru;
  const machine = stateMachines.get<typeof roguelikeStateMachine>(STATE_MACHINES.ROGUELIKE);

  if (!machine) {
    throw new Error("Roguelike machine not found");
  }

  const transitionToSchema = getStfSchemaMap();

  /** Routes */
  app.get("/info", (_req: Request, res: Response) => {
    res.send({
      isSandbox: config.isSandbox,
      domain: config.domain,
      transitionToSchema,
      schemas: {
        registerPlayer: {
          primaryType: registerPlayerSchema.EIP712TypedData.primaryType,
          types: registerPlayerSchema.EIP712TypedData.types,
        },
        updatePlayerState: {
          primaryType: updatePlayerStateSchema.EIP712TypedData.primaryType,
          types: updatePlayerStateSchema.EIP712TypedData.types,
        },
      },
    });
  });

  app.post("/:transition", async (req: Request, res: Response) => {
    const { transition } = req.params;

    console.log(`Received request for transition: ${transition}`);
    console.log(`Request body:`, JSON.stringify(req.body, null, 2));

    if (!transitions[transition]) {
      console.log(`No transition found for: ${transition}`);
      res.status(400).send({ message: "NO_TRANSITION_FOR_ACTION" });
      return;
    }

    try {
      let msgSender, signature, inputs;

      // Check if the request body is in the expected format
      if (req.body.msgSender && req.body.inputs) {
        ({ msgSender, signature, inputs } = req.body);
      } else {
        // If not, assume the entire body is the inputs
        msgSender = req.body.playerId || "0x0000000000000000000000000000000000000000"; // Use playerId as msgSender if available
        signature = undefined; // No signature provided
        inputs = req.body;
      }

      console.log("msgSender:", msgSender);
      console.log("signature:", signature);
      console.log("inputs:", JSON.stringify(inputs, null, 2));

      const schemaId = transitionToSchema[transition];
      const schema = transition === "registerPlayer" ? registerPlayerSchema : updatePlayerStateSchema;

      if (!schema) {
        console.log(`No schema found for transition: ${transition}`);
        throw new Error(`NO_SCHEMA_FOUND for ${transition}`);
      }

      console.log(`Using schema:`, JSON.stringify(schema.schema, null, 2));

      let action;
      if (signature) {
        // If signature is provided, create a signed action
        action = schema.actionFrom({
          msgSender,
          signature,
          inputs,
        });
      } else {
        // If no signature is provided, create an unsigned action
        action = {
          msgSender,
          inputs,
        };
      }

      console.log(`Submitting action:`, JSON.stringify(action, null, 2));

      const ack = await submitAction(transition, action);
      const { logs, errors } = await ack.waitFor(ActionConfirmationStatus.C1);
      if (errors?.length) {
        throw new Error(errors[0].message);
      }
      res.status(201).send({ logs, ackHash: ack.hash });
    } catch (e: any) {
      console.error(`Error processing request:`, e);
      res.status(400).send({ error: e.message });
    }
  });

  app.get("/", (_req: Request, res: Response) => {
    res.json({ state: machine.wrappedState });
  });

  app.listen(PORT, () => {
    console.log(`Player Stat MRU Server running on port ${PORT}`);
    console.log(`Available transitions:`, Object.keys(transitions));
  });
}import { ActionSchema } from "@stackr/sdk";
import { Wallet } from "ethers";
import { stackrConfig } from "../stackr.config";

export const sleep = (ms: number) => {
  return new Promise((resolve) => setTimeout(resolve, ms));
};

export const signByOperator = async (schema: ActionSchema, payload: any) => {
  const { operator } = stackrConfig;
  const wallet = new Wallet(operator.accounts[0].privateKey);
  const signature = await wallet.signTypedData(
    schema.domain,
    schema.EIP712TypedData.types,
    payload
  );
  return { msgSender: wallet.address, signature };
};import { STATE_MACHINES, roguelikeStateMachine } from "./stackr/machine";
import { mru } from "./stackr/mru";
import { registerPlayerSchema, updatePlayerStateSchema } from "./stackr/schemas";
import { signByOperator, sleep } from "./utils";

export const play = async () => {
  const machine = mru.stateMachines.get<typeof roguelikeStateMachine>(
    STATE_MACHINES.ROGUELIKE
  );

  if (!machine) {
    throw new Error("Roguelike machine not found");
  }

  while (true) {
    const gameState = machine.wrappedState;

    console.log(`Current State: ${JSON.stringify(gameState, null, 2)}\n`);

    console.log("1. Register new player");
    console.log("2. Update player state");
    console.log("3. Exit");

    const choice = await new Promise<string>((resolve) => {
      process.stdin.once('data', (data) => {
        resolve(data.toString().trim());
      });
    });

    if (choice === "3") {
      break;
    }

    console.log("Enter player ID (wallet address):");
    const playerId = await new Promise<string>((resolve) => {
      process.stdin.once('data', (data) => {
        resolve(data.toString().trim());
      });
    });

    if (playerId.length === 0) {
      console.log("Player ID is required. Please try again.");
      continue;
    }

    if (choice === "1") {
      const inputs = { playerId };
      const { msgSender, signature } = await signByOperator(registerPlayerSchema, inputs);

      await mru.submitAction(
        "registerPlayer",
        registerPlayerSchema.actionFrom({ inputs, msgSender, signature })
      );
    } else if (choice === "2") {
      const inputs = {
        playerId,
        health: Math.floor(Math.random() * 100),
        mana: Math.floor(Math.random() * 100),
        xp: Math.floor(Math.random() * 1000),
        level: Math.floor(Math.random() * 10),
        deckState: "0x" + Math.random().toString(16).substr(2, 64),
        currentFloor: Math.floor(Math.random() * 10),
        score: Math.floor(Math.random() * 10000),
        inventory: "0x" + Math.random().toString(16).substr(2, 64),
        turnNumber: (gameState.players[playerId]?.turnNumber || 0) + 1,
      };

      const { msgSender, signature } = await signByOperator(updatePlayerStateSchema, inputs);

      await mru.submitAction(
        "updatePlayerState",
        updatePlayerStateSchema.actionFrom({ inputs, msgSender, signature })
      );
    }

    await sleep(500);
  }
};import { Playground } from "@stackr/sdk/plugins";
import { play } from "./cli";
import { mru } from "./stackr/mru";
import { sleep } from "./utils";
import { setupServer } from "./server";
const main = async () => {
  if (process.env.NODE_ENV !== "production") {
    Playground.init(mru);
    await sleep(1000);
  }
  else {
    setupServer()
  }

  await play();
};

main();
import { StateMachine } from "@stackr/sdk/machine";
import genesisState from "../../genesis-state.json";
import { RoguelikeGameState } from "./state";
import { transitions } from "./transitions";

const STATE_MACHINES = {
  ROGUELIKE: "roguelike",
};

const roguelikeStateMachine = new StateMachine({
  id: STATE_MACHINES.ROGUELIKE,
  initialState: genesisState.state,
  stateClass: RoguelikeGameState,
  on: transitions,
});

export { STATE_MACHINES, roguelikeStateMachine };import { ActionSchema, SolidityType } from "@stackr/sdk";

export const registerPlayerSchema = new ActionSchema("registerPlayer", {
  playerId: SolidityType.ADDRESS,
});

export const updatePlayerStateSchema = new ActionSchema("updatePlayerState", {
  playerId: SolidityType.ADDRESS,
  health: SolidityType.UINT,
  mana: SolidityType.UINT,
  xp: SolidityType.UINT,
  level: SolidityType.UINT,
  deckState: SolidityType.STRING,
  currentFloor: SolidityType.UINT,
  score: SolidityType.UINT,
  inventory: SolidityType.STRING,
  turnNumber: SolidityType.UINT,
});import { State } from "@stackr/sdk/machine";
import { BytesLike, hexlify, solidityPackedKeccak256 } from "ethers";

export interface PlayerState {
  health: number;
  mana: number;
  xp: number;
  level: number;
  deckState: string;
  currentFloor: number;
  score: number;
  inventory: string;
  turnNumber: number;
}

export interface GameState {
  players: Record<string, PlayerState>;
  seed: number;
  globalTurnNumber: number;
}

export class RoguelikeGameState extends State<string, GameState> {
  constructor(state: string) {
    super(state);
  }

  transformer() {
    return {
      wrap: () => {
        return JSON.parse(this.state) as GameState;
      },
      unwrap: (wrappedState: GameState) => {
        return JSON.stringify(wrappedState);
      },
    };
  }

  getRootHash(): BytesLike {
    return hexlify(solidityPackedKeccak256(["string"], [this.state]));
  }
}
import { STF, Transitions } from "@stackr/sdk/machine";
import { RoguelikeGameState, PlayerState, GameState } from "./state";

type RegisterPlayerInput = {
  playerId: string;
};

type UpdatePlayerStateInput = {
  playerId: string;
  health: number;
  mana: number;
  xp: number;
  level: number;
  deckState: string;
  currentFloor: number;
  score: number;
  inventory: string;
  turnNumber: number;
};

const registerPlayer: STF<RoguelikeGameState, RegisterPlayerInput> = {
  handler: ({ state, inputs }) => {
    const { playerId } = inputs;

    if (state.players[playerId]) {
      throw new Error("Player already registered");
    }

    const newPlayerState: PlayerState = {
      health: 100,
      mana: 100,
      xp: 0,
      level: 1,
      deckState: "0x" + "0".repeat(64),
      currentFloor: 1,
      score: 0,
      inventory: "0x" + "0".repeat(64),
      turnNumber: 0,
    };

    const newState: GameState = {
      ...state,
      players: {
        ...state.players,
        [playerId]: newPlayerState,
      },
      globalTurnNumber: state.globalTurnNumber + 1,
    };

    return newState;
  },
};

const updatePlayerState: STF<RoguelikeGameState, UpdatePlayerStateInput> = {
  handler: ({ state, inputs }) => {
    const { playerId, ...playerUpdates } = inputs;

    if (!state.players[playerId]) {
      throw new Error("Player not registered");
    }

    const newPlayerState: PlayerState = {
      ...state.players[playerId],
      ...playerUpdates,
    };

    const newState: GameState = {
      ...state,
      players: {
        ...state.players,
        [playerId]: newPlayerState,
      },
      globalTurnNumber: state.globalTurnNumber + 1,
    };

    return newState;
  },
};

export const transitions: Transitions<RoguelikeGameState> = {
  registerPlayer,
  updatePlayerState,
};
import { MicroRollup } from "@stackr/sdk";
import { stackrConfig } from "../../stackr.config";
import { registerPlayerSchema, updatePlayerStateSchema } from "./schemas";
import { roguelikeStateMachine } from "./machine";

const mru = await MicroRollup({
  config: stackrConfig,
  actionSchemas: [registerPlayerSchema, updatePlayerStateSchema],
  stateMachines: [roguelikeStateMachine],
  stfSchemaMap: {
    registerPlayer: registerPlayerSchema,
    updatePlayerState: updatePlayerStateSchema,
  },
});

await mru.init();

export { mru };